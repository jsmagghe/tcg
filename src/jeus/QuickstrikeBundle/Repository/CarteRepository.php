<?php

namespace jeus\QuickstrikeBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CarteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarteRepository extends EntityRepository {

    public function findByCritere(array $criteres) {
        $QueryBuilder = $this->createQueryBuilder('c')
                ->where('c.numero not like \'%v\'')
                ->andWhere('c.nom != \'opening attack\'');


        if (isset($criteres['extension'])) {
            $liste = '';
            foreach ($criteres['extension'] as $Entity) {
                if ($liste !== '')
                    $liste .= ',';
                $liste .= $Entity->getId();
            }
            if ($liste !== '') {
                $QueryBuilder->innerJoin('c.extension', 'e')
                        ->andWhere('e.id in (' . $liste . ')');
            }
        }

        if (isset($criteres['typeCarte'])) {
            $liste = '';
            foreach ($criteres['typeCarte'] as $Entity) {
                if ($liste !== '')
                    $liste .= ',';
                $liste .= $Entity->getId();
            }
            if ($liste !== '') {
                $QueryBuilder->innerJoin('c.typeCarte', 't')
                        ->andWhere('t.id in (' . $liste . ')');
            }
        }

        if (
            (isset($criteres['idChamber'])) 
            && (isset($criteres['traitCarte'])) 
            ) {
            $QueryBuilder->andWhere('t.id <> ' . $criteres['idChamber']);
        }

        if (isset($criteres['traitCarte'])) {
            if (!isset($criteres['typeCarte'][0]))
                $QueryBuilder->innerJoin('c.typeCarte', 't');

            $liste = '';
            $condition = '';
            foreach ($criteres['traitCarte'] as $Entity) {
                if ($liste !== '')
                    $liste .= ',';
                $liste .= $Entity->getId();
                if ($condition !== '')
                    $condition .= ' and ';
                $condition .= '(tc.id=' . $Entity->getId() . ')';
            }
            if (($liste !== '') && ($condition !== '')) {
                $QueryBuilder->innerJoin('c.traitCartes', 'tc')
                        //->andWhere('((t.id<>' . $criteres['idChamber'] . ') and (tc.id in (' . $liste . '))) or ((t.id=' . $criteres['idChamber'] . ')and (' . $condition . ')  ) ');
                        ->andWhere('tc.id in (' . $liste . ')');
            }
        }
        
        if (isset($criteres['effet'])) {
            if ($criteres['effet'] !== '') {
                $QueryBuilder->innerJoin('c.effet', 'eff')
                        //->andWhere('e.texte like "%' . strtolower($criteres['effet']). '%"');
                        ->andWhere('eff.texte LIKE :effet')
                        ->setParameter('effet', '%' . $criteres['effet']. '%');
            }
        }

        if ((isset($criteres['nombreCarte'])) && ((int) $criteres['nombreCarte'] != 0)) {
            $QueryBuilder->setMaxResults((int) $criteres['nombreCarte']);
        } elseif (!isset($criteres['nombreCarte'])) {
            //$QueryBuilder->setMaxResults(60);
        }

        /*if (isset($criteres['page']))
            $QueryBuilder->setFirstResults((int) $criteres['page'] * 9 + 1);*/

        $QueryBuilder->orderBy('c.typeCarte, c.extension', 'ASC');

        if (isset($criteres['test'])) {
            /*var_dump($QueryBuilder->getQuery()->getSQL());
            var_dump($QueryBuilder->getQuery()->getResult());
            exit;*/
        }

        return $QueryBuilder->getQuery()
                        ->getResult();
    }

    public function findByIds(array $ids) {
        $QueryBuilder = $this->createQueryBuilder('c')
                             ->andWhere('c.id IN (:ids)')
                             ->setParameter('ids', $ids);

        return $QueryBuilder->getQuery()
                        ->getResult();
    }


}
